'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/PYsV8vWoBCN
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

import { ChangeEvent, useState } from 'react';
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose
} from '@/components/ui/dialog/dialog';
import { Button } from '@/components/ui/button/button';
import { Label } from '@/components/ui/label/label';
import { Input } from '@/components/ui/input/input';
import { Textarea } from '@/components/ui/textarea/textarea';
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem
} from '@/components/ui/select/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio/radio-group';
import { PlusIcon, SearchIcon, ShieldIcon } from '@/components/ui/icon/icon';
import { MAX_DIFFICULTY_LEVEL, StudyType } from '@/constants/study/study';
import TierRadioItem, { TierIcon, getTierInfo } from '@/components/study/tier';
import DifficultyLevelDialog from '@/components/study/difficulty-level-dialog';
import { cn } from '@/lib/utils';

export default function StudyCreateModal() {
  const [open, setOpen] = useState(false);
  const [difficultyBegin, setDifficultyBegin] = useState(0);
  const [difficultyEnd, setDifficultyEnd] = useState(MAX_DIFFICULTY_LEVEL);
  const [studyType, setStudyType] = useState('');
  const beginTierInfo = getTierInfo(difficultyBegin);
  const endTierInfo = getTierInfo(difficultyEnd);

  const [showDifficultyBeginModal, setShowDifficultyBeginModal] =
    useState(false);
  const [showDifficultyEndModal, setShowDifficultyEndModal] = useState(false);
  return (
    <div>
      <Dialog open={open} onOpenChange={setOpen}>
        <Button
          onClick={() => setOpen(true)}
          className="inline-flex h-10 items-center justify-center rounded-md bg-gray-900 px-4 py-2 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-600 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90 dark:focus-visible:ring-gray-300"
        >
          <PlusIcon className="w-4 h-4 mr-2 " />
          스터디 개설하기
        </Button>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>새로운 스터디 개설하기</DialogTitle>
            <DialogDescription>
              스터디를 개설하려면 상세정보를 입력하세요.
            </DialogDescription>
          </DialogHeader>
          <form className="grid gap-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2 col-span-2">
                <Label className="pl-1" htmlFor="name">
                  스터디 그룹명
                </Label>
                <Input
                  id="name"
                  placeholder="그룹명을 입력하세요"
                  className="w-full"
                />
              </div>
            </div>
            <div className="space-y-2">
              <Label className="pl-1" htmlFor="intro">
                소개말
              </Label>
              <Textarea
                id="intro"
                placeholder="스터디 그룹에 대해 소개해주세요"
              />
            </div>
            <div className="grid grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label className="pl-1" htmlFor="start-date">
                  시작 날짜
                </Label>
                <Input id="start-date" type="date" />
              </div>
              <div className="space-y-2">
                <Label className="pl-1" htmlFor="end-date">
                  종료 날짜
                </Label>
                <Input id="end-date" type="date" />
              </div>
              <div className="space-y-2">
                <Label className="pl-1" htmlFor="weeks">
                  총 주차수
                </Label>
                <Input id="weeks" type="number" min="1" max="52" />
              </div>
            </div>
            <div className="grid grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label className="pl-1" htmlFor="penalty">
                  벌금
                </Label>
                <Input id="penalty" type="number" min="0" className="w-full" />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label className="pl-1" htmlFor="rating-limit">
                    인원 제한
                  </Label>
                  <Input
                    id="capcity"
                    type="number"
                    min="0"
                    className="w-full"
                  />
                </div>
                <div className="space-y-2">
                  <Label className="pl-1" htmlFor="rating-limit">
                    신뢰도 제한
                  </Label>
                  <Input
                    id="rating-limit"
                    type="number"
                    min="0"
                    className="w-full"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label className="pl-1" htmlFor="type">
                  스터디 종류
                </Label>
                <Select
                  id="studyType"
                  value={studyType}
                  onValueChange={(value) => setStudyType(value)}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value={StudyType.ALGORITHM}>
                      {StudyType.ALGORITHM}
                    </SelectItem>
                    <SelectItem value={StudyType.BOOK}>
                      {StudyType.BOOK}
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {studyType == StudyType.BOOK && (
              <div className="grid grid-cols-2 mr-4">
                <div className="space-y-2">
                  <Label className="pl-1" htmlFor="book-search">
                    도서 검색
                  </Label>
                  <div className=" rounded-md border-gray-200 border wrap-content">
                    <div className="flex gap-2 ">
                      <Input
                        className="border-none m-0"
                        id="book-search"
                        placeholder="도서명/저자를 입력하세요."
                      />
                      <Button type="button" variant="ghost" size="icon">
                        <SearchIcon className="h-4 w-4 " />
                        <span className="sr-only">Search</span>
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            )}
            {studyType == StudyType.ALGORITHM && (
              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label className="pl-1">문제 난이도</Label>
                  <div className="grid grid-cols-5">
                    <Button
                      className="col-span-2"
                      variant="outline"
                      onClick={(e) => {
                        e.preventDefault();
                        setShowDifficultyBeginModal(true);
                      }}
                    >
                      <TierIcon {...beginTierInfo}></TierIcon>
                    </Button>
                    <div className="content-center w-full">
                      <p className=" text-center">~</p>
                    </div>
                    <Button
                      className="col-span-2"
                      variant="outline"
                      onClick={(e) => {
                        e.preventDefault();
                        setShowDifficultyEndModal(true);
                      }}
                    >
                      <TierIcon {...endTierInfo}></TierIcon>
                    </Button>
                  </div>
                </div>
                <div className="space-y-2 mr-4">
                  <Label className="pl-1" htmlFor="rating-limit">
                    문제 개수
                  </Label>
                  <Input
                    id="problemCount"
                    type="number"
                    min="0"
                    className="w-[50%]"
                  />
                </div>
              </div>
            )}
          </form>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpen(false)}>
              취소
            </Button>
            <Button className="hover:bg-gray-600 bg-gray-900" type="submit">
              <p className="text-white">스터디 개설하기</p>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      <DifficultyLevelDialog
        open={showDifficultyBeginModal}
        setOpen={setShowDifficultyBeginModal}
        difficultyLevel={difficultyBegin}
        setDifficultyLevel={setDifficultyBegin}
      ></DifficultyLevelDialog>

      <DifficultyLevelDialog
        open={showDifficultyEndModal}
        setOpen={setShowDifficultyEndModal}
        difficultyLevel={difficultyEnd}
        setDifficultyLevel={setDifficultyEnd}
      ></DifficultyLevelDialog>
    </div>
  );
}
